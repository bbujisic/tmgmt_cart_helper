<?php

/**
 * @file tmgmt_cart_helper.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_menu().
 */
function tmgmt_cart_helper_menu() {
  $items = array();

  $items['admin/tmgmt/bulk'] = array(
    'title' => 'Bulk translate',
    'access arguments' => array('translate content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_cart_helper_bulk_translate_form'),
    'file' => 'inc/tmgmt_cart_helper.bulk_translate.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/addtocart'] = array(
    'title' => 'Add to translation cart',
    'page callback' => 'tmgmt_cart_helper_node_contextual',
    'page arguments' => array(1),
    'access arguments' => array('translate content'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/structure/block/manage/%/%/addtocart'] = array(
    'title' => 'Add to translation cart',
    'access arguments' => array('translate content'),
    'page callback' => 'tmgmt_cart_helper_block_contextual',
    'page arguments' => array(4, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );


  return $items;
}

function tmgmt_cart_helper_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#element']['#block'])) {
    if (!tmgmt_cart_helper_block_is_translatable($element['#element']['#block']) && isset($element['#links']['block-addtocart'])) {
      unset($element['#links']['block-addtocart']);
    }
  }
}


/**
 * Callback function for "add NODE to translation cart" contextual link.
 */
function tmgmt_cart_helper_node_contextual($node) {
  tmgmt_cart_helper_add_node($node);

  drupal_goto(drupal_get_destination());
}



/**
 * Callback function for "add BLOCK to translation cart" contextual link.
 *
 * @todo: This callback is limited to Beans due to really strange mechanism Drupal handles block translations. It should
 *        probably be more flexible. Investigate...
 */
function tmgmt_cart_helper_block_contextual($module, $delta) {
  if (module_exists('tmgmt_entity')) {
    $block = block_load($module, $delta);
    if (tmgmt_cart_helper_block_is_translatable($block)) {
      $bean = bean_load_delta($delta);
      tmgmt_cart_helper_add('entity', 'bean', $bean->bid);
    }
  }

  drupal_goto(drupal_get_destination());
}


/**
 * Bulk node tranlsator.
 */
function tmgmt_cart_helper_add_nodes($nids) {
  foreach ($nids as $nid) {
    $node = node_load($nid);
    tmgmt_cart_helper_add_node($node);

    drupal_goto('admin/tmgmt/cart');
  }
}

/**
 * This function decides which translation plugin should be used based on node settings.
 */
function tmgmt_cart_helper_add_node($node) {
  $translation_type = variable_get('language_content_type_' . $node->type, 0);
  switch ($translation_type) {
    case 2:
      $plugin = 'node';
      break;
    case 4:
      $plugin = 'entity';
      break;
    default:
      drupal_set_message(t('Node @title is not translatable', array('@title' => $node->title)), 'warning');
      return;
      break;
  };

  tmgmt_cart_helper_add($plugin, 'node', $node->nid, $node->title);

}

/**
 * Low level function which handles adding to cart and success messages.
 */
function  tmgmt_cart_helper_add($plugin, $item_type, $source_id, $title = false) {
  $vars = array(
    '@url' => url('admin/tmgmt/cart'),
    '@title' => ($title ? $title : t('The content'))
  );
  if (tmgmt_ui_cart_get()->isSourceItemAdded($plugin, $item_type, $source_id)) {
    drupal_set_message(t('@title is already added to the <a href="@url">cart</a>.', $vars), 'warning');
  } else {
    if (tmgmt_ui_cart_get()->addJobItem($plugin, $item_type, $source_id)) {
      drupal_set_message(t('@title was added to the <a href="@url">cart</a>.', $vars));
    } else {
      drupal_set_message(t('@title could not be added to the <a href="@url">cart</a>.', $vars), 'error');
    }
  }
}


function tmgmt_cart_helper_block_is_translatable($block) {
  if ($block->module == 'bean' && module_exists('tmgmt_entity') && array_key_exists('bean', tmgmt_source_translatable_item_types('entity'))) {
    return true;
  }
  return false;
}